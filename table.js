// Generated by CoffeeScript 1.8.0
(function() {
  window.onload = function() {
    var exchange, height, initialize, name, niceTable, selectRow, sort, sortByHeight, sortByName, sortByWeight, tableDelete, tableInsert, weight;
    tableInsert = document.getElementById("tableInsert");
    niceTable = document.getElementById("niceTable");
    tableDelete = document.getElementById("tableDelete");
    selectRow = document.getElementById("selectRow");
    sortByName = document.getElementById("sortByName");
    sortByHeight = document.getElementById("sortByHeight");
    sortByWeight = document.getElementById("sortByWeight");
    name = document.getElementById("name");
    height = document.getElementById("height");
    weight = document.getElementById("weight");

    /* initialize the select options */
    (initialize = function() {
      var i, option, _i, _ref;
      selectRow.innerHTML = "";
      for (i = _i = 1, _ref = niceTable.rows.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        if (i !== 0) {
          option = document.createElement("option");
          option.value = i;
          option.innerHTML = "row" + i;
          selectRow.appendChild(option);
        }
      }
      if (niceTable.rows.length === 1) {
        selectRow.innerHTML = "";
      }
      return null;
    })();

    /* exchange two rows in table */
    exchange = function(a, b) {
      var index, item, row, rowA, rowB, _i, _j, _len, _len1;
      rowA = niceTable.rows[a].cells;
      rowB = niceTable.rows[b].cells;
      niceTable.deleteRow(a);
      row = niceTable.insertRow(a);
      for (index = _i = 0, _len = rowB.length; _i < _len; index = ++_i) {
        item = rowB[index];
        row.insertCell(index).innerHTML = item.innerHTML;
      }
      niceTable.deleteRow(b);
      row = niceTable.insertRow(b);
      for (index = _j = 0, _len1 = rowA.length; _j < _len1; index = ++_j) {
        item = rowA[index];
        row.insertCell(index).innerHTML = item.innerHTML;
      }
      return null;
    };

    /* sort */
    sort = function(key, order) {
      var cmp1, cmp2, i, j, len, _i, _j, _ref;
      len = niceTable.rows.length - 1;
      for (i = _i = 1; 1 <= len ? _i <= len : _i >= len; i = 1 <= len ? ++_i : --_i) {
        if (i + 1 <= len) {
          for (j = _j = _ref = i + 1; _ref <= len ? _j <= len : _j >= len; j = _ref <= len ? ++_j : --_j) {
            cmp1 = parseInt(niceTable.rows[i].cells[key].innerHTML);
            cmp2 = parseInt(niceTable.rows[j].cells[key].innerHTML);
            if (order === "asc") {
              if (cmp1 > cmp2) {
                exchange(i, j);
              }
            } else {
              if (cmp1 < cmp2) {
                exchange(i, j);
              }
            }
          }
        }
      }
      return null;
    };
    tableInsert.onclick = function() {
      var row;
      row = niceTable.insertRow(niceTable.rows.length);
      if (name.value === "") {
        name.classList.add("buzz-out");
        setTimeout((function() {
          return name.classList.remove("buzz-out");
        }), 750);
      } else if (height.value === "") {
        height.classList.add("buzz-out");
        setTimeout((function() {
          return height.classList.remove("buzz-out");
        }), 750);
      } else if (weight.value === "") {
        weight.classList.add("buzz-out");
        setTimeout((function() {
          return weight.classList.remove("buzz-out");
        }), 750);
      } else {
        row.insertCell(0).innerHTML = name.value;
        row.insertCell(1).innerHTML = height.value;
        row.insertCell(2).innerHTML = weight.value;
        name.value = height.value = weight.value = "";
      }
      return initialize();
    };
    tableDelete.onclick = function() {
      niceTable.deleteRow(parseInt(selectRow.value));
      return initialize();
    };
    sortByHeight.onclick = function() {
      sortByWeight.innerHTML = "weight(cm)";
      if (this.innerHTML === "height(cm)↓") {
        sort(1, "asc");
        return this.innerHTML = "height(cm)↑";
      } else {
        sort(1, "desc");
        return this.innerHTML = "height(cm)↓";
      }
    };
    sortByWeight.onclick = function() {
      sortByHeight.innerHTML = "height(cm)";
      if (this.innerHTML === "weight(cm)↓") {
        sort(2, "asc");
        return this.innerHTML = "weight(cm)↑";
      } else {
        sort(2, "desc");
        return this.innerHTML = "weight(cm)↓";
      }
    };
    return null;
  };

}).call(this);
